name: One-Time Events
timezone: Europe/Berlin

events:
  - summary: "Hands-on session on how multi-inventory/environment scenarios work in OSISM"
    begin: 2022-07-13 12:05:00         # uses default timezone above
    duration:
      minutes: 50
    description: |
      Hands-on session with the colleagues from OSISM on how multi-inventory/environment scenarios work in OSISM.
    location: "https://conf.scs.koeln:8443/SCS-Tech"
  - summary: "Team Container workshop on a standardized set of parameters"
    begin: 2022-07-04 15:05:00
    duration:
      minutes: 140
    description: |
      https://github.com/SovereignCloudStack/issues/discussions/93#discussioncomment-2983888
      We need to continue with defining a set of standard settings (clusterctl.yaml / values.yaml) that define the cluster with its standard features. This is the set of cluster-API parameters, generalized a bit where needed to allow for other CAPx providers than CAPO and even for non-CAPI implementations.
    location: "https://conf.scs.koeln:8443/SCS-Tech"
  - summary: "Team Container workshop on operator-based approach to lifecycle management of Cluster API"
    begin: 2022-07-18 15:05:00
    duration:
      minutes: 90
    description: |
      Sven from syself will present an idea on a operator-based approach to lifecycle management of Cluster API.
  - summary: "OSS Review Toolkit presentation"
    begin: 2022-07-21 10:05:00
    duration:
      minutes: 30
    description: |
      Sebastian Schuberth, founder of OSS Review Toolkit (ORT), will join us during our regular Team OPS meeting to present ORT and be available to answer your questions. You are welcome to send us your questions in advance so that we can prepare this meeting in the best possible way.
    location: "https://conf.scs.koeln:8443/SCS-Tech"
  - summary: "Infrastructure layout discussion"
    begin: 2022-08-01 15:05:00
    duration:
      minutes: 60
    description: |
      Let's discuss about IaaS layout: What are typical control and compute roles and which services belongs to these roles and which not. Which services and applications should run on other layers in the SCS stack? Feel free to join this discussion!
    location: "https://conf.scs.koeln:8443/SCS-Tech"
  - summary: "SIG standard/cert: IaaS deep dive"
    begin: 2022-08-04 14:05:00
    duration:
      minutes: 50
    description: |
      Deep dive on IaaS standardization
      From the three existing standardization topics (OpenStack powered compute cert, image metadata, flavor naming): What do we need to adjust, enhance?
      What other standards do we need? Which ones to focus on first?
      We have a list on the etherpad.

      Minutes: https://github.com/SovereignCloudStack/minutes/tree/main/sig-standardization
      Etherpad: https://input.osb-alliance.de/p/2022-scs-sig-standardization
      Jitsi server on https://conf.scs.koeln:8443/SCS-Tech
      Dial-In: +49-221-292772-611
    location: "https://conf.scs.koeln:8443/SCS-Tech"
  - summary: "Who runs the API server for SCS KaaS?"
    begin: 2022-08-08 15:05:00
    duration:
      minutes: 60
    description: |
      Continue the discussion from the container team meeting (2022-08-08):
      KaaS offering: The assumption is that the provider offers a k8s (kube-apiserver) style interface (where in the reference implementation a management server with CAPI/SCS operator is running), accepting custom resources for controlling customer workload clusters.
        * Challenge: If cloud providers offer a k8s (kube-apiserver) endpoint for cluster management, there are a few challenges: If the endpoint is backed by a k8s cluster, it needs serious multi-tenancy features (authentication+authorization concepts, strong isolation beyond just namespaces, ...).
        * Alternative challenge: The cloud provider could run a management cluster per customer. Trouble is the overhead then: Running a 3c+1w cluster per customer. (Could we just run the single-node kind cluster and defer the clusterctl move when this is really used? Move to first workload cluster? Move to another cluster or back to kind cluster if that first workload cluster gets deleted?)
        * Discussion: If DevOps teams want to control their own cluster using a k8s style API, aren't they capable and willing to run the management cluster anyway, deployable by a single click/API call? If the SCS operator supposedly takes out most pain from operating workload clusters, it should also take out the pain from running the management cluster, no?

      Minutes: https://github.com/SovereignCloudStack/minutes/tree/main/sig-standardization
      Etherpad: https://input.osb-alliance.de/p/2022-scs-sig-standardization
      Jitsi server on https://conf.scs.koeln:8443/SCS-Tech
      Dial-In: +49-221-292772-611
    location: "https://conf.scs.koeln:8443/SCS-Tech"
  - summary: "Debug session for the harbor k8s cluster"
    begin: 2022-08-12 14:05:00
    duration:
      minutes: 80
    description: |
      The old k8s cluster that supports the harbor registry behind https://registry.scs.community/ got broken by expired internal certs.
      A `kubeadm (alpha) certs renew` was insufficient to repair it. The additional kubelet server certificate rotation proved
      insufficient as well, see https://github.com/SovereignCloudStack/issues/issues/155#issuecomment-1211844406 .
      We want to analyze this together and understand what else is wrong in the k8s cluster.
      Once the cluster works again, we want to proceed to looking at harbor.

      Etherpad: https://input.osb-alliance.de/p/20220812-k8s-cluster-certs-debugging
      Jitsi server on https://conf.scs.koeln:8443/SCS-Tech
      Dial-In: +49-221-292772-611
      (If others in the hacking session are using this room, we can create another one.)
    location: "https://conf.scs.koeln:8443/SCS-Tech"
  - summary: "KaaS standardization deep dive"
    begin: 2022-08-15 14:05:00
    duration:
      minutes: 50
    description: |
      Standards for the container management interface:
      For our KaaS interface, we want to create both a standard and a reference implementation that implements the standards.
      The reference implementation will use the Cluster-API and can assume an SCS-compliant IaaS. It should be easily adaptable to other IaaS with existing CAPI providers (CAPx) and CCMs. It will split the cluster-description into a cloud-stack template and a parameter file. The parameter file should use variables that are NOT dependent on the underlaying IaaS (which means we may require flavor names to be translated from an SCS standard into the native flavor naming in the implementation). The parameter file can also be supported by implementations that may not even use CAPI, such as Gardener (or Gridscale's in case they decide against CAPI).
      The parameter file is thus a standard. (We can define several of them, having a simple as well as more complicated cloud stacks.)
      The resulting cluster obviously also needs to have certain predefined standardized properties, this is the other half of what we need to standardize in this model.
      Today's discussion on the parameter files and the standard cluster properties.

      Minutes: https://github.com/SovereignCloudStack/minutes/tree/main/sig-standardization
      Etherpad: https://input.osb-alliance.de/p/2022-scs-sig-standardization
      Jitsi server on https://conf.scs.koeln:8443/SCS-Tech
      Dial-In: +49-221-292772-611
    location: "https://conf.scs.koeln:8443/SCS-Tech"
